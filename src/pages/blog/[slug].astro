---
import { getCollection } from "astro:content";
import BlogLayout from "../../layouts/BlogLayout.astro";
import { unified } from 'unified';
import remarkParse from 'remark-parse';
import remarkRehype from 'remark-rehype';
import rehypeStringify from 'rehype-stringify';

export async function getStaticPaths() {
  const posts = await getCollection("blog");

  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post, posts },
  }));
}

const { post, posts } = Astro.props;

const relatedPosts = posts.filter((p) => p.slug !== post.slug).slice(0, 3);

// Convierte el Markdown a HTML
const contentHtml = await unified()
  .use(remarkParse)
  .use(remarkRehype)
  .use(rehypeStringify)
  .process(post.body);
---

<BlogLayout
  title={post.data.title}
  description={post.data.description}
  date={post.data.date}
>
  <article class="prose lg:prose-lg max-w-none">
    <div set:html={contentHtml} />
  </article>

  {
    relatedPosts.length > 0 && (
      <aside class="mt-10">
        <h2 class="text-xl font-semibold text-gray-800 mb-4">
          Art√≠culos Relacionados
        </h2>
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          {relatedPosts.map((related) => (
            <a
              href={`/blog/${related.slug}`}
              class="block p-4 bg-white shadow-md rounded-lg hover:shadow-lg transition"
            >
              <h3 class="text-lg font-semibold text-gray-900">
                {related.data.title}
              </h3>
              <p class="text-gray-600 mt-2">{related.data.description}</p>
            </a>
          ))}
        </div>
      </aside>
    )
  }
</BlogLayout>
